buildscript {
    repositories {
        maven { url 'https://maven.fabric.io/public' }
    }

    dependencies {
        classpath 'io.fabric.tools:gradle:1.+'
    }
}
apply plugin: 'com.android.application'
apply plugin: 'io.fabric'

android {
    compileSdkVersion 21
    buildToolsVersion "21.1.2"

    defaultConfig {
        applicationId "org.lunci.dumbthing"
        minSdkVersion 14
        targetSdkVersion 21
        versionCode 3
        versionName "1.0"
    }
    buildTypes {
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'),'proguard-rules.pro','proguard-com.twitter.sdk.android.twitter.txt'
        }
        debug {
//            buildConfigField "boolean", "USE_CRASHLYTICS", "false"
//            ext.enableCrashlytics = false
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_7
        targetCompatibility JavaVersion.VERSION_1_7
    }
}

repositories {
    mavenCentral()
    maven { url 'https://maven.fabric.io/public' }
}

dependencies {
    compile fileTree(include: ['*.jar'], dir: 'libs')
    compile 'com.android.support:appcompat-v7:21.0.3'
    compile 'de.greenrobot:eventbus:2.4.0'
    compile 'com.android.support:support-v4:21.0.3'
    compile 'com.squareup:android-times-square:1.5.0@aar'
    compile 'com.daimajia.swipelayout:library:1.1.8@aar'
    compile 'com.facebook.android:facebook-android-sdk:3.22.0'
    compile('com.twitter.sdk.android:twitter:1.3.0@aar') {
        transitive = true;
    }
    compile 'com.google.android.gms:play-services:6.5.87'
}

afterEvaluate {
    initCrashlyticsPropertiesIfNeeded()
}

def initCrashlyticsPropertiesIfNeeded() {
    def propertiesFile = file('crashlytics.properties')
    if (!propertiesFile.exists()) {
        def commentMessage = "This is autogenerated crashlytics property from system environment to prevent key to be committed to source control."
        ant.propertyfile(file: "crashlytics.properties", comment: commentMessage) {
            entry(key: "apiSecret", value: crashlyticsdemoApisecret)
            entry(key: "apiKey", value: crashlyticsdemoApikey)
        }
    }
}

if(project.hasProperty("app.properties")
        && new File(project.property("app.properties")).exists()) {

    Properties props = new Properties()
    props.load(new FileInputStream(file(project.property("app.properties"))))

    android {
        signingConfigs {
            debug {
                storeFile file(props['debugkeystore'])
                storePassword props['debugkeystore.password']
            }
            release{
                storeFile file(props['releasekeystore'])
                storePassword props['releasekeystore.password']
                keyAlias props['releasekeyalias.keyalias']
                keyPassword props['releasekeystore.password']
            }
        }
    }
}